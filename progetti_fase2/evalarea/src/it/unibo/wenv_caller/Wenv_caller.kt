/* Generated by AN DISI Unibo */ 
package it.unibo.wenv_caller

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.*

class Wenv_caller ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 
				lateinit  var vr : VrobotLLMoves24 // a quanto pare inizializzarlo qua fuori non fa funzionare niente
				var tempo_altezza = 0
				var tempo_base = 0
				var doing_left_wall = false
				var doing_bottom_wall = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name | STARTS")
						
							 		vr = VrobotLLMoves24.create("localhost", myself)
							 		vr.halt() // per sbloccare eventuali not allowed
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="doLeftWall",cond=whenEvent("misurazione"))
				}	 
				state("doLeftWall") { //this:State
					action { //it:State
						CommUtils.outblue("$name | DOING LEFT WALL")
						delay(200) 
						
									doing_left_wall = true
									vr.startTimer()
									vr.forward(-1);
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="turnLeft",cond=whenEvent("collisione"))
					transition(edgeName="t02",targetState="handleOstacolo",cond=whenEvent("ostacolo"))
				}	 
				state("turnLeft") { //this:State
					action { //it:State
						CommUtils.outblue("$name | turning")
						delay(200) 
						
									vr.halt()
									tempo_altezza += vr.getDuration()
									CommUtils.outgreen("$name | left wall long $tempo_altezza ms");
									doing_left_wall = false
							        vr.turnLeft();
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="doBottomWall", cond=doswitch() )
				}	 
				state("doBottomWall") { //this:State
					action { //it:State
						CommUtils.outblue("$name | DOING BOTTOM WALL")
						delay(200) 
						
									doing_bottom_wall = true
									vr.startTimer()
									vr.forward(-1);
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="calcArea",cond=whenEvent("collisione"))
					transition(edgeName="t04",targetState="handleOstacolo",cond=whenEvent("ostacolo"))
				}	 
				state("handleOstacolo") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 
									vr.halt()
									if(doing_left_wall) {
										tempo_altezza += vr.getDuration()
										CommUtils.outyellow("	fino ad adesso tempo altezza = $tempo_altezza");
									}
									else {
										tempo_base += vr.getDuration()
										CommUtils.outyellow("	fino ad adesso tempo base = $tempo_base");
									}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="handleOstacoloSparito",cond=whenEvent("ostacolo_sparito"))
				}	 
				state("handleOstacoloSparito") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if(  doing_left_wall  
						 ){forward("resume_left_wall", "resume_left_wall(si)" ,name ) 
						}
						else
						 {forward("resume_bottom_wall", "resume_bottom_wall(si)" ,name ) 
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="doLeftWall",cond=whenDispatch("resume_left_wall"))
					transition(edgeName="t07",targetState="doBottomWall",cond=whenDispatch("resume_bottom_wall"))
				}	 
				state("calcArea") { //this:State
					action { //it:State
						
									vr.halt()
									tempo_base += vr.getDuration()
									CommUtils.outgreen("$name | bottom wall long $tempo_base ms");
							        vr.turnLeft();
							        doing_bottom_wall = false
							        
									// assumo una velocità di 1 m/s, ovvero 100cm/s
									// ho il tempo in millisecondi e quindi divido per 1000 
									// spazio = velocità * tempo
									val altezza = 100.0f * (tempo_altezza/1000.0f)
									val base 	= 100.0f * (tempo_base/1000.0f)
									val area 	= base * altezza
						CommUtils.outgreen("$name | Area = $area cm^2 (se il robot ha una velocità di un 1 m/s)")
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
