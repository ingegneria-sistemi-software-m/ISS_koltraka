/* Generated by AN DISI Unibo */ 
package it.unibo.sonar_publisher

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.*

class Sonar_publisher ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		     
				val soglia = 10
				
				fun diplayLed(V : Boolean){
				  	if(V)
				  		Runtime.getRuntime().exec("python ledPython25On.py"); 
				  	else
				  		Runtime.getRuntime().exec("python ledPython25Off.py");
				}
				
			   	lateinit  var outindev  : OutInSonarRasp
			   	val sonarInterpreter = main.java.SonarTranslator(myself)
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | START")
						delay(3000) 
						 diplayLed(true)  
						delay(2000) 
						 diplayLed(false)  
						 outindev = OutInSonarRasp(myself, "sensor/sonar", "sensor/sonar_control")  
						delay(1000) 
						 
							        Runtime.getRuntime().exec("python sonar_mqtt.py")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleMisurazione",cond=whenDispatch("misurazione_disp"))
					interrupthandle(edgeName="t01",targetState="translateMisurazione",cond=whenEvent("kernel_rawmsg"),interruptedStateTransitions)
				}	 
				state("translateMisurazione") { //this:State
					action { //it:State
						CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("kernel_rawmsg(ARG)"), Term.createTerm("kernel_rawmsg(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 sonarInterpreter.cvtToApplMessage( payloadArg(0) )  
						}
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("handleMisurazione") { //this:State
					action { //it:State
						 
						            val valRicevuto: Float = payloadArg(0).toString().toFloat()
						            if(valRicevuto <= soglia)
								  		Runtime.getRuntime().exec("python ledPython25On.py"); 
								  	else
								  		Runtime.getRuntime().exec("python ledPython25Off.py");
						emit("misurazione", "misurazione(valRicevuto)" ) 
						CommUtils.outmagenta("$name | Emitted misurazione($valRicevuto)")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 
