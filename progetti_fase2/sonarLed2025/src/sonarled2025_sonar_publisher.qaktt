System sonarled2025

mqttBroker "192.168.1.189" : 1883 eventTopic "sensor/sonar" 
   
Dispatch misurazione_disp : misurazione_disp(X)

Event misurazione 		: misurazione(X)
Event ostacolo 			: ostacolo(X)
Event ostacolo_sparito 	: ostacolo_sparito(X)
Event kernel_rawmsg 	: kernel_rawmsg(ARG)

Context ctx_sonar 		ip [ host="localhost" port=8075] 
Context ctx_observers 	ip [ host="192.168.1.189" port=8360] // la emit e i contesti remoti non funzionano come penso


QActor sonar_publisher context ctx_sonar {
import "main.java.*"
	[#     
		val soglia = 10
		var ostacolo = false 
		
		fun diplayLed(V : Boolean){
		  	if(V)
		  		Runtime.getRuntime().exec("python ledPython25On.py"); 
		  	else
		  		Runtime.getRuntime().exec("python ledPython25Off.py");
		}
		
	   	lateinit  var outindev  : OutInSonarRasp
	   	val sonarInterpreter = main.java.SonarTranslator(myself)
	#]
	State s0 initial{
		println("$name | START") color green
		delay 3000 // connessione MQTT ....
		
 		// prova led
 		[# diplayLed(true) #]
 		delay 2000
 		[# diplayLed(false) #]
 		
 		// mi iscrivo alla topic del sonar
 		[# outindev = OutInSonarRasp(myself, "sensor/sonar", "sensor/sonar_control") #]
 		delay 1000
 		// attivo la pubblicazione delle misurazioni
 		[# 
	        Runtime.getRuntime().exec("python sonar_mqtt.py")
 		#]
    } 
    Goto work
    
    
    State work {
    	
    }
	Transition t0  
		whenMsg misurazione_disp			-> handleMisurazione
		whenInterruptEvent kernel_rawmsg    -> translateMisurazione


	State translateMisurazione{
		printCurrentMessage color green
		onMsg( kernel_rawmsg : kernel_rawmsg(ARG)){
			[# sonarInterpreter.cvtToApplMessage( payloadArg(0) ) #] // qua dentro faccio l'autodispatch
		}
		returnFromInterrupt
	}
	
	State handleMisurazione {
        [# 
            val valRicevuto: Float = payloadArg(0).toString().toFloat()
            
            if(valRicevuto <= soglia) {
		  		Runtime.getRuntime().exec("python ledPython25On.py"); 	
		  		
		  		if(!ostacolo) {
		  			emit("ostacolo", "ostacolo($valRicevuto)")
		  			ostacolo = true	
		  		}
		  	}
		  	else {
		  		Runtime.getRuntime().exec("python ledPython25Off.py");
		  		
		  		if(ostacolo) {
		  			emit("ostacolo_sparito", "ostacolo_sparito(si)")
		  			ostacolo = false
		  		}
			}
		  	
		  	emit("misurazione", "misurazione($valRicevuto)")
        #]
        // qua non so come emettere il valore e non la stringa "valRicevuto"... per adesso faccio in kotlin :(
        // emit misurazione : misurazione(valRicevuto) 
        println("$name | Emitted misurazione($valRicevuto)") color magenta
    }
    Goto work
}




/* OBSERVERS LOCALI */



//QActor observer_builder context ctx_sonar{
//	 State s0 initial{
//	 	println("$name | STARTS creating 3 observers")
//	 }
//	 Goto work 
//	 
//	 State work{
//	 	println("$name | WORK")
//	 	[# 
//	 	  	createActorDynamically( "sonar_observer", "_0", false) 
//	 	   	createActorDynamically( "sonar_observer", "_1", false)
//	 	   	createActorDynamically( "sonar_observer", "_2", false)	
//	 	#]
//	}
//} 
//
//QActor sonar_observer context ctx_sonar dynamicOnly {
//	State s0 initial {  		
//		println("$name started")
//	}	
//	Goto work
//	
//	State work{
//		// in attesa di una misurazione
//	}
//	Transition t0
//		whenEvent ostacolo -> handleOstacolo
//		whenEvent ostacolo_sparito -> handleOstacoloSparito
//		whenEvent misurazione -> handleEvent 
//		
//	State handleOstacolo{
//		printCurrentMessage color magenta
//	}
//	Goto work
//	
//	State handleOstacoloSparito{
//		printCurrentMessage color magenta
//	}
//	Goto work
//	
//	State handleEvent{
//		printCurrentMessage color magenta
//	}
//	Goto work
//}

//QActor sonar_observer context ctx_sonar dynamicOnly {
//	[# var evento_misurazione = "0.0" #]
//	
//	State s0 initial {  		
//		println("$name started")
//	}	
//	Goto work
//	
//		
//	State work{
//		// in attesa di una misurazione
//	}
//	Transition t0
//		whenEvent misurazione -> handleEvent // emesso dall'attore sonar_publisher
//		
//	State handleEvent{
//		onMsg( misurazione : misurazione(X)){
//			[# evento_misurazione = payloadArg(0) #]
//		}
//		println("$name | Misurazione ricevuta=$evento_misurazione") color magenta
//		delay 1000
//	}
//	Goto work
//}