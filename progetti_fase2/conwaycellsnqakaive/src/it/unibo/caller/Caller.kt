/* Generated by AN DISI Unibo */ 
package it.unibo.caller

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Caller ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "initGrid"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("initGrid") { //this:State
					action { //it:State
						delay(3000) 
						CommUtils.outmagenta("$name | inizializzazione celle")
						emit("clearCell", "clearCell(caller_actor)" ) 
						forward("changeCellState", "changeCellState(0,0)" ,"cell_0_0" ) 
						forward("changeCellState", "changeCellState(0,1)" ,"cell_0_1" ) 
						forward("changeCellState", "changeCellState(1,0)" ,"cell_1_0" ) 
						delay(3000) 
						CommUtils.outmagenta("$name | inizia il gioco")
						emit("startthegame", "startthegame(caller_actor)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
