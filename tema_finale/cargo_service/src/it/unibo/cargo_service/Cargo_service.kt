/* Generated by AN DISI Unibo */ 
package it.unibo.cargo_service

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargo_service ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				val MAX_LOAD = 100
				var cur_load = 0
				
				// oggetto che conterrà tutto lo stato relativo al deposito:
				//		- mappa del deposito
				//		- posizione dell'io/port e degli slot
				//		- posizione del robot
				//		- stato degli slot (occupato/libero)
				// 		- ...
				lateinit var deposito : CargoHold
				
				/*
				 * Uso queste variabili per avere una idea degli stati che dovrò definire 
				 * e per ricordarmi dei messaggi a cui dovranno essere sensibili.
				 * Non sono da usare veramente!
				 */
				// fino a che il container associato alla richiesta corrente non è stato depositato other requests are not elaborated!
				var serving_request	= false
				// se durante il trasporto il container cade (sonar misura una distanza troppo grande) il robot si deve interrompere 
				// fino a che il container non viene riposizionato
				var container_caduto = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name STARTS")
						
									deposito = new Deposito("mappa.bin")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
