/* Generated by AN DISI Unibo */ 
package it.unibo.sonar_emitter

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Sonar_emitter ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 
				lateinit var reader : java.io.BufferedReader
			    lateinit var p : Process	
			    var Distance = 0
				
				// variabili e costanti per la rilevazione del container
				val D_FREE   = 10
				val Sonar_measurement_frequency = 1.0  	// Hz (misurazioni al secondo)
				val tempo_per_conferma_container = 3 	// secondi
				val tick_per_conferma_container = sonar_measurment_frequency * tempo_conferma_container
			    var cur_tick_container_present = 0
			    var cur_tick_container_absent  = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("$name | start")
						
									p      = Runtime.getRuntime().exec("python sonar.py")
									reader = java.io.BufferedReader( java.io.InputStreamReader(p.getInputStream()) )	
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="readSonarData", cond=doswitch() )
				}	 
				state("readSonarData") { //this:State
					action { //it:State
						 
									var data = reader.readLine()
									if( data != null ){
										try{ 
											val vd = data.toFloat()
											val v  = vd.toInt()
											
											// filtro per dati sporchi
											if( v <= 100 ) {	
												Distance = v				
											} 
											else
												Distance = 0
										}catch(e: Exception){
											CommUtils.outred("$name readSonarDataERROR: $e "   )
										}
									}
						if(  distanza < D_FREE/2  
						 ){ cur_tick++  
						}
						if(  distanza > D_FREE  
						 ){CommUtils.outred("$name IL CONTAINER é CADUTO!!!")
						}
						if(  ){emit("container_present", "container_present(si)" ) 
						}
						if(  ){emit("container_absent", "container_absent(si)" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="readSonarData", cond=doswitch() )
				}	 
			}
		}
} 
