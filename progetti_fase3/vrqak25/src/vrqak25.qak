System vrqak25
mqttBroker "localhost" : 1883 eventTopic "vrevents"
/*  
========================================
vrqak.qak
========================================
*/    
/*
 * PROPEDEUTICO a basicrobot
 * Usa VrobotLLMoves24  
 * Realizza uno step asincorno come in VroboHLMoves24
 * Risponde ai segeunti messaggi:
 *      Dispatch move : move(MOVE) MOVE= w | a | d | h | p
 *      Request  step
 *      Request cmd
 * 
 * Può essere attivato come risorsa esterna all'applicazione.
 * E' un esempio di un primo basicrobot logico.
 */  
 
Dispatch halt   : halt(X)
Dispatch move   : move(M)
 
Request  cmd    : cmd(MOVE,T)  				"MOVE = w|s|a|d|p   mosse del virtual robot"
Reply cmddone   : cmddone(R)          for cmd
Reply cmdfailed : cmdfailed(T,CAUSE)  for cmd

/*
 * i tipi principali sono vrinfo(mossa, elapsed), quando è andato tutto bene
 * e vrinfo(elapsed, collision) quando la mossa è andata male
 */
Dispatch vrinfo : vrinfo(SOURCE,INFO)  		"inviato dal supporto all'owner (per questo è un dispatch)"
 
Event  sonarval : distance( DISTANCE ) 	    "emesso in out"	
Event  sonardata: sonar( DISTANCE ) 	    "emesso dal SONAR"	

Request step    : step(TIME)	
Reply stepdone  : stepdone(V)                 for step
Reply stepfailed: stepfailed(PERCENT, CAUSE)  for step

 
Context ctxvrqak  ip [host="localhost" port=8125]




QActor vrqak context ctxvrqak withobj vr using "VrobotLLMoves24.create(\"localhost\",myself)"{  
	import "main.java.VrobotLLMoves24"
	
	[# var doingAsynchStep = false  #]
	
	
	
	State s0 initial{
		println("$name STARTS") color blue
//		[# vr.setTrace(true) #] 
//		subscribeTo vrqak for sonardata
		//println("$name subscribe to myself done") color blue
	} 
	Goto work
	
	State work{
		println("$name | work") color blue 
	}
	Transition t0
	   whenMsg     halt  -> dohalt
	   whenMsg     move  -> domove
	   whenRequest cmd   -> domoverequest
	   whenRequest step -> handleAsynchStep




	State handleAsynchStep{
		println("$name | handleAsynchStep $currentMsg") color blue
		[# doingAsynchStep = true  #]
		onMsg( step:step(T)){
			[# vr.forward(payloadArg(0).toInt() ) #]
		}
	}	
	Transition t0
	    whenEvent sonardata	-> handleSonarData  
	    whenMsg   vrinfo   	-> handleVrinfoMsgReply
	    whenMsg   halt     	-> dohalt  //inviato per resettare
	    
	    
	    
	    
    State dohalt{   	
    	printCurrentMessage color red
    	[# vr.halt() #]
    }
    Goto work
    


	State handleSonarData{ 
		printCurrentMessage color black  
		onMsg( sonardata : sonar(D) ){
			[# var D = payloadArg(0) #]
			//emitlocalstream sonardata : sonar($D)  //vengono accodati tutti ??
			[# val sonarEvent = "sonardataaaaaa(" +  D + ")" #]
			updateResource  [# "$sonarEvent" #]       
//			updateResource  [# "nonews" #]     //last info: per evitare che CoAP ripeta il dato
			println("$name | EMIT (publish) sonarval ---------------------------------- ") color black 
//			[#  mqtt.publish("vrevents", "msg(sonarval,event,vrqak,ANY,distance(4),0)" ) #]
   			emit sonarval :  distance($D)  // evento non propagato in assenza di MQTT
		} 
	} 
	Transition t0 whenMsg vrinfo -> handleVrinfoMsgReply // se sono finito qua, significa che sono in attesa del risultato di una mossa
														 // MA se ci sono finito per una mossa che non aspetta una risposta??



	State domove{
		printCurrentMessage color yellow
		onMsg( move : move(M) ){
			[# val Move = payloadArg(0);  #]
			if [# Move == "h" #] { [# vr.halt()    #]  }
			if [# Move == "w" #] { [# vr.step(150) #]  }
			if [# Move == "p" #] { [# vr.step(350) #]  }  //synch
			if [# Move == "a" || Move == "l" #]{ [# vr.turnLeft() #]  }
			if [# Move == "d" || Move == "r" #]{ [# vr.turnRight() #] }
		}
	}
	Goto work	   




	State domoverequest{
		printCurrentMessage color blue
		onMsg( cmd : cmd(M,T) ){
			[# 
				val Move = payloadArg(0);
				val T = payloadArg(1).toInt()
			#]
			println("$name | domoverequest $Move $T") color blue
			if [# Move == "h" #] { [# vr.halt() #]     }
			if [# Move == "p" #] { [# vr.step(T.toLong()) #]    }  //synch
			if [# Move == "w" #] { [# vr.forward(T) #] }
			if [# Move == "s" #] { [# vr.backward(T) #]}
			if [# Move == "a" || Move == "l" #]{ [# vr.turnLeft() #]  }
			if [# Move == "d" || Move == "r" #]{ [# vr.turnRight() #] }
		}
	}
	Transition t0 
		whenEvent sonardata -> handleSonarData 
		whenMsg vrinfo      -> handleVrinfoMsgReply
  



	State handleVrinfoMsgReply{
		printCurrentMessage
		println("$name | handleVrinfoMsgReply $currentMsg doingAsynchStep=$doingAsynchStep") color red
		
		// mossa andata a finire bene
		onMsg( vrinfo : vrinfo(S, elapsed)){
			if [# doingAsynchStep #]{  
				println("$name | reply asynchstep done") color yellow
				replyTo step with stepdone : stepdone(ok)
				[# doingAsynchStep = false #]
			} 
			else {
				replyTo cmd with cmddone : cmddone(elapsed)
			}
		}
		
		// mossa andata a finire male
		onMsg( vrinfo : vrinfo(T, collision)){ 
			[# val T = payloadArg(0) #]
			
			if [# doingAsynchStep #]{ 
				println("$name | reply asynchstep ko") color yellow
				[# val Percent = T.toFloat()/370 #]
				replyTo step with stepfailed : stepfailed($Percent, collision)
				[# doingAsynchStep = false #]
			} 
			else {
				println("$name | reply cmdfailed after $T") color yellow
				replyTo cmd with cmdfailed : cmdfailed($T,collision)
			}
		}
		
		// nota come (trascurando il sonar) finisco in questo stato solo quando ho mandato
		// una richiesta, via step o cmd_request. Di conseguenza uso doingAsynchStep per 
		// capire come rispondere
		//
		// e se non c'è nessuno a cui devo rispondere? (vedi sonar)
	}	
	Goto work
}

/*
 * Test for updatereourc
 */
 /* 
QActor obs context ctxvrqak{
	State s0 initial{
		observeResource vrqak msgid vrinfo
	}
	Goto work
	
	State work{
		
	}
	Transition t0 
		whenMsg vrinfo -> handleVrinfo
		

    State handleVrinfo{
    	printCurrentMessage color black
    }
    Goto work
}
*/